#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 46
#define YY_END_OF_BUFFER 47
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[383] =
    {   0,
        0,    0,    4,    4,    0,    0,    0,    0,   47,   45,
       42,   43,   32,   44,   45,   45,   45,   29,   45,   45,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    4,    4,    5,    4,   45,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
       45,   42,   41,   33,   44,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       34,   39,   39,   40,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       36,   38,   35,   37,   42,    2,    6,    0,   29,    8,
        9,    7,   30,   30,   30,   30,   30,   12,   13,   14,
       30,   30,   30,   30,   30,   23,   30,   30,   30,   31,
       31,   31,   31,   31,   31,   12,   13,   14,   31,   31,
       31,   31,   31,   23,   31,   31,   31,   31,    4,    4,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    0,   41,   33,   34,   42,    2,    6,    0,    8,
        9,    7,    0,    0,    0,    0,   12,   13,   14,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,

        0,    0,   12,   13,   14,    0,    0,    0,    0,    0,
       23,    0,    0,    0,    0,    1,   30,   30,   30,   30,
       30,   30,   16,   30,   24,   26,   30,   30,   30,   31,
       31,   31,   31,   31,   31,   31,   16,   31,   24,   26,
       31,   31,   31,   31,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    0,    1,
       33,   34,    0,    0,    0,    0,    0,    0,   16,    0,
       24,   26,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0,   24,   26,    0,    0,    0,   21,   30,
       11,   22,   30,   30,   17,   18,   19,   30,   21,   31,

       11,   22,   31,   31,   31,   17,   18,   19,   27,   31,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
       21,    0,   11,   22,    0,    0,   17,   18,   19,    0,
       21,    0,   11,   22,    0,    0,   17,   18,   19,    0,
       10,   30,   30,   20,   10,   28,   31,   31,   20,    4,
        4,    4,    4,   10,    0,    0,   20,   10,    0,    0,
       20,   30,   25,   31,   25,    4,    4,    0,   25,    0,
       25,   30,   31,    4,    0,    0,   15,   15,    4,   15,
       15,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    6,
        7,    8,    1,    1,    9,    1,    1,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,   11,
       12,   13,    1,    1,   14,   15,   16,   17,   18,   19,
       15,   20,   21,   15,   15,   22,   15,   23,   24,   25,
       15,   26,   27,   28,   29,   30,   31,   15,   15,   15,
        5,   32,    5,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   40,   40,   43,   40,   44,
       45,   46,   40,   47,   48,   49,   50,   51,   52,   40,
       40,   40,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    2,    1,    2,    1,    3,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static const flex_int16_t yy_base[390] =
    {   0,
        0,    0,   52,    0,  104,    0,  156,    0,  597, 1034,
      557, 1034, 1034, 1034,  549,  544,  532,  441,  200,  433,
        0,  196,  189,  192,  196,  203,  204,  206,  193,  206,
      209,    0,  229,  209,  232,  237,  237,  241,  239,  209,
      242,  247,    0,  441, 1034,    0,  429,  419,  261,  405,
      270,  268,  256,  278,  269,  282,  252,  270,  282,  283,
      305,  326,  315, 1034,  328,  330,  332,  337,  339,  341,
      352,  372,  346,  418,  378,  387,  394,  403,  397,  427,
     1034, 1034,  407, 1034, 1034,  371,  363,  352,  287,  340,
      420,  417,  338,  448,  431,  434,  333,  344,  367,  373,

     1034,  382,  446,  420,  323, 1034, 1034,  318,  302, 1034,
     1034, 1034,    0,  426,  343,  429,  349,    0,    0,  453,
      448,  452,  457,  451,  455,    0,  461,  347,  465,    0,
      461,  378,  462,  479,  468,    0,    0,  475,  467,  470,
      476,  474,  480,    0,  488,  496,  486,  496,    0,  308,
     1034,  517,    0,    0,    0,  495,  510,  500,  516,    0,
        0,  508,  501,  504,  511,  506,  511,    0,  516,  524,
      524,  543,  551, 1034, 1034,  561,  564,  566,  568,  570,
      573,  575,  577,  581,  584,  587,  614,  619,  623,  626,
      631,  633,  635,  641,  638,  644,  668,  671,  555,  572,

      562,  578, 1034, 1034,  579,  598,  603,  609,  609,  632,
     1034,  638,  576,  663,  277, 1034,  661,  661,  664,  675,
      676,  671,    0,  671,    0,    0,  675,  675,  679,  686,
      680,  692,  696,  681,  697,  696,    0,  696,    0,    0,
      701,  702,  709,  709,  730,  716,  710,  721,  724,  725,
      721,    0,  723,    0,    0,  727,  727,  729,  752,  758,
      266,  221,  761,  764,  770,  773,  779,  782,  791,  797,
      800,  812,  815,  817,  830,  760,  765,  769,  794,  807,
      811, 1034,  811, 1034, 1034,  816,  816,  820,    0,  819,
        0,    0,  822,  829,    0,    0,    0,  813,    0,  826,

        0,    0,  837,  838,  844,    0,    0,    0,    0,  850,
        0,  839,    0,    0,  844,  851,    0,    0,    0,  858,
      874,  876,  878,  880,  891,  886,  894,  897,  901,  912,
     1034,  865, 1034, 1034,  873,  890, 1034, 1034, 1034,  884,
        0,  893,  902,    0,    0,    0,  900,  908,    0,    0,
      906,  914,    0,  933,  937,  943,  949, 1034,  913,  926,
     1034,  921,    0,  928,    0,  929,    0,  958,  963,  936,
     1034,  941,  944,  945,  970,  955,    0,    0,    0,  980,
     1034, 1034,  217,  211, 1018, 1021, 1024, 1027, 1030
    } ;

static const flex_int16_t yy_def[390] =
    {   0,
      382,    1,  382,    3,  382,    5,  382,    7,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  385,  385,  382,  385,  382,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      386,  386,  386,  382,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  387,  382,  382,
      382,  382,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  385,  385,
      382,  388,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  386,  386,  382,  382,  386,  386,  386,  389,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  387,  382,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  388,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  389,  386,
      387,  387,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      383,  383,  383,  383,  384,  384,  384,  384,  384,  385,
      385,  385,  385,  386,  386,  386,  386,  382,  382,  382,
      382,  383,  383,  384,  384,  385,  385,  386,  386,  382,
      382,  383,  384,  385,  386,  382,  383,  384,  385,  386,
      382,    0,  382,  382,  382,  382,  382,  382,  382
    } ;

static const flex_int16_t yy_nxt[1087] =
    {   0,
       10,   11,   12,   13,   14,   15,   10,   16,   17,   18,
       19,   20,   14,   21,   21,   22,   21,   23,   24,   21,
       25,   26,   27,   28,   29,   21,   21,   30,   21,   21,
       31,   10,   10,   32,   32,   33,   32,   34,   35,   32,
       32,   36,   37,   38,   39,   40,   32,   32,   41,   32,
       32,   42,   43,   44,   45,   43,   46,   15,   43,   47,
       48,   43,   49,   50,   46,   43,   43,   51,   43,   52,
       53,   43,   54,   55,   56,   57,   58,   43,   43,   59,
       43,   43,   60,   43,   43,   43,   43,   51,   43,   52,
       53,   43,   43,   54,   55,   56,   57,   58,   43,   43,

       59,   43,   43,   60,   61,   62,   63,   64,   65,   66,
       61,   67,   68,   61,   69,   70,   65,   61,   61,   71,
       61,   72,   73,   61,   74,   75,   76,   77,   78,   61,
       61,   79,   61,   61,   80,   81,   61,   61,   61,   71,
       61,   72,   73,   61,   61,   74,   75,   76,   77,   78,
       61,   61,   79,   61,   61,   80,   82,   83,   84,   82,
       85,   86,   82,   87,   88,   82,   89,   90,   85,   82,
       82,   91,   82,   92,   93,   82,   94,   95,   96,   97,
       98,   82,   82,   99,   82,   82,  100,   82,   82,   82,
      101,   91,   82,   92,  102,   82,   82,   94,   95,  103,

       97,   98,   82,   82,  104,   82,   82,  100,  110,  114,
      116,  111,  118,  130,  119,  117,  127,  115,  120,  113,
      122,  124,  121,  216,  126,  128,  123,  125,  129,  114,
      133,  116,  145,  118,  119,  134,  117,  127,  115,  120,
      122,  124,  131,  121,  126,  135,  128,  123,  125,  129,
      132,  133,  136,  145,  140,  137,  134,  144,  142,  138,
      141,  146,  131,  139,  143,  135,  148,  147,  216,  153,
      168,  132,  154,  136,  140,  137,  160,  144,  142,  216,
      138,  141,  146,  156,  139,  143,  164,  148,  147,  158,
      168,  157,  165,  169,  159,  110,  161,  160,  111,  166,

      162,  170,  171,  156,  163,  167,  164,  173,  174,  150,
      158,  109,  157,  165,  169,  159,  161,  173,  174,  166,
      216,  162,  170,  171,  105,  163,  167,  176,  173,  174,
      173,  174,  173,  174,  173,  174,  175,  177,  178,  173,
      174,  173,  174,  173,  174,  179,  175,  180,  173,  174,
      181,  211,  112,  182,  173,  174,  218,  175,  203,  175,
      108,  175,  220,  175,  228,  183,  187,  212,  175,  107,
      175,  211,  175,  184,  173,  174,  218,  175,  106,  203,
      173,  174,  220,  175,  228,  183,  213,  187,  212,  173,
      174,  231,  214,  185,  184,  191,  173,  174,  186,  173,

      174,  192,  203,  175,  193,  173,  174,  213,  105,  175,
      194,  231,  195,  214,  185,  191,  197,  155,  175,  186,
      173,  174,  192,  203,  193,  175,  196,  152,  175,  173,
      174,  194,  195,  199,  175,  151,  188,  197,  201,  213,
      189,  200,  150,  202,  190,  112,  198,  196,  207,  175,
      109,  209,  217,  199,  208,  219,  188,  210,  175,  201,
      213,  189,  200,  209,  202,  190,  204,  198,  207,  210,
      205,  209,  221,  217,  206,  208,  219,  222,  210,  223,
      224,  225,  226,  209,  227,  229,  204,  230,  232,  234,
      210,  205,  233,  221,  235,  206,  236,  237,  222,  238,

      223,  224,  225,  226,  239,  227,  229,  240,  230,  232,
      234,  241,  233,  242,  243,  235,  244,  236,  237,  216,
      238,  246,  215,  247,  215,  239,  248,  250,  240,  249,
      251,  252,  241,  242,  253,  243,  254,  244,  255,  256,
      108,  257,  246,  247,  258,  173,  174,  248,  250,  249,
      107,  251,  252,  173,  174,  253,  106,  254,  105,  255,
      256,  257,  176,  173,  174,  258,  173,  174,  173,  174,
      260,  261,  173,  174,  175,  173,  174,  173,  174,  173,
      174,  276,  175,  173,  174,  277,  173,  174,  278,  173,
      174,  279,  175,  287,  264,  175,  382,  175,  280,  262,

      266,  175,  276,  263,  175,  277,  175,  382,  175,  278,
      265,  279,  175,  287,  264,  175,  173,  174,  175,  280,
      266,  173,  174,  382,  263,  173,  174,  281,  173,  174,
      282,  265,  283,  173,  174,  173,  174,  173,  174,  284,
      173,  174,  267,  173,  174,  175,  173,  174,  281,  382,
      175,  282,  382,  283,  175,  268,  270,  175,  269,  285,
      284,  286,  175,  267,  175,  271,  175,  273,  272,  175,
      173,  174,  175,  173,  174,  175,  268,  270,  289,  269,
      285,  291,  286,  288,  382,  274,  271,  290,  273,  272,
      292,  275,  382,  293,  294,  295,  296,  297,  289,  175,

      298,  291,  175,  299,  288,  274,  300,  303,  290,  301,
      292,  302,  275,  293,  304,  294,  295,  296,  297,  305,
      306,  298,  307,  299,  308,  382,  309,  300,  303,  301,
      310,  302,  216,  311,  304,  215,  312,  215,  313,  314,
      305,  306,  315,  307,  316,  308,  309,  317,  318,  319,
      320,  310,  382,  311,  260,  261,  382,  312,  313,  314,
      173,  174,  315,  173,  174,  316,  173,  174,  317,  318,
      319,  320,  173,  174,  382,  173,  174,  331,  321,  382,
      382,  173,  174,  262,  173,  174,  333,  323,  324,  175,
      322,  332,  175,  173,  174,  175,  325,  331,  321,  173,

      174,  175,  173,  174,  175,  326,  333,  323,  324,  334,
      175,  322,  332,  175,  173,  174,  325,  173,  174,  173,
      174,  327,  175,  382,  335,  382,  326,  382,  175,  334,
      344,  175,  173,  174,  336,  337,  328,  338,  339,  329,
      382,  340,  327,  175,  335,  341,  175,  342,  175,  343,
      344,  330,  345,  382,  346,  336,  337,  328,  338,  339,
      329,  175,  340,  347,  348,  350,  341,  349,  342,  351,
      343,  352,  330,  345,  346,  353,  173,  174,  173,  174,
      173,  174,  173,  174,  347,  348,  350,  349,  173,  174,
      351,  358,  352,  173,  174,  353,  173,  174,  359,  173,

      174,  361,  354,  173,  174,  175,  356,  175,  382,  175,
      360,  175,  358,  362,  173,  174,  355,  175,  363,  359,
      364,  361,  175,  354,  365,  175,  366,  356,  175,  357,
      367,  360,  175,  370,  362,  173,  174,  355,  363,  173,
      174,  364,  371,  175,  365,  173,  174,  366,  372,  357,
      367,  173,  174,  382,  370,  373,  374,  368,  382,  369,
      173,  174,  371,  376,  175,  173,  174,  377,  175,  372,
      378,  379,  173,  174,  175,  382,  373,  374,  368,  369,
      175,  381,  173,  174,  376,  375,  382,  382,  377,  175,
      382,  378,  379,  382,  175,  382,  380,  382,  382,  382,

      382,  175,  381,  382,  382,  382,  375,  382,  382,  382,
      382,  175,  382,  382,  382,  382,  382,  380,  149,  382,
      149,  172,  172,  172,  215,  215,  215,  245,  245,  245,
      259,  259,  259,    9,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382
    } ;

static const flex_int16_t yy_chk[1087] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,   19,   22,
       23,   19,   24,  384,   25,   23,   29,   22,   25,  383,
       26,   27,   25,  262,   28,   30,   26,   27,   31,   22,
       34,   23,   40,   24,   25,   34,   23,   29,   22,   25,
       26,   27,   33,   25,   28,   35,   30,   26,   27,   31,
       33,   34,   35,   40,   37,   36,   34,   39,   38,   36,
       37,   41,   33,   36,   38,   35,   42,   41,  261,   49,
       57,   33,   49,   35,   37,   36,   53,   39,   38,  215,
       36,   37,   41,   51,   36,   38,   55,   42,   41,   52,
       57,   51,   55,   58,   52,   89,   54,   53,   89,   56,

       54,   59,   60,   51,   54,   56,   55,   61,   61,  150,
       52,  109,   51,   55,   58,   52,   54,   63,   63,   56,
      108,   54,   59,   60,  105,   54,   56,   62,   62,   62,
       65,   65,   66,   66,   67,   67,   61,   66,   67,   68,
       68,   69,   69,   70,   70,   68,   63,   69,   73,   73,
       69,   97,   90,   70,   71,   71,  115,   62,   93,   65,
       88,   66,  117,   67,  128,   71,   73,   98,   68,   87,
       69,   97,   70,   71,   72,   72,  115,   73,   86,   93,
       75,   75,  117,   71,  128,   71,   99,   73,   98,   76,
       76,  132,  100,   72,   71,   75,   77,   77,   72,   79,

       79,   75,  102,   72,   76,   78,   78,   99,   83,   75,
       76,  132,   77,  100,   72,   75,   79,   50,   76,   72,
       74,   74,   75,  102,   76,   77,   78,   48,   79,   80,
       80,   76,   77,   91,   78,   47,   74,   79,   92,  104,
       74,   91,   44,   92,   74,   20,   80,   78,   95,   74,
       18,   96,  114,   91,   95,  116,   74,   96,   80,   92,
      104,   74,   91,  103,   92,   74,   94,   80,   95,  103,
       94,   96,  120,  114,   94,   95,  116,  121,   96,  122,
      123,  124,  125,  103,  127,  129,   94,  131,  133,  135,
      103,   94,  134,  120,  138,   94,  139,  140,  121,  141,

      122,  123,  124,  125,  142,  127,  129,  143,  131,  133,
      135,  145,  134,  146,  147,  138,  148,  139,  140,  152,
      141,  156,  152,  157,  152,  142,  158,  162,  143,  159,
      163,  164,  145,  146,  165,  147,  166,  148,  167,  169,
       17,  170,  156,  157,  171,  172,  172,  158,  162,  159,
       16,  163,  164,  173,  173,  165,   15,  166,   11,  167,
      169,  170,  176,  176,  176,  171,  177,  177,  178,  178,
      179,  179,  180,  180,  172,  181,  181,  182,  182,  183,
      183,  199,  173,  184,  184,  200,  185,  185,  201,  186,
      186,  202,  176,  213,  184,  177,    9,  178,  205,  179,

      186,  180,  199,  183,  181,  200,  182,    0,  183,  201,
      185,  202,  184,  213,  184,  185,  187,  187,  186,  205,
      186,  188,  188,    0,  183,  189,  189,  206,  190,  190,
      207,  185,  208,  191,  191,  192,  192,  193,  193,  209,
      195,  195,  189,  194,  194,  187,  196,  196,  206,    0,
      188,  207,    0,  208,  189,  190,  192,  190,  191,  210,
      209,  212,  191,  189,  192,  193,  193,  196,  194,  195,
      197,  197,  194,  198,  198,  196,  190,  192,  217,  191,
      210,  219,  212,  214,    0,  197,  193,  218,  196,  194,
      220,  198,    0,  221,  222,  224,  227,  228,  217,  197,

      229,  219,  198,  230,  214,  197,  231,  234,  218,  232,
      220,  233,  198,  221,  235,  222,  224,  227,  228,  236,
      238,  229,  241,  230,  242,    0,  243,  231,  234,  232,
      244,  233,  245,  246,  235,  245,  247,  245,  248,  249,
      236,  238,  250,  241,  251,  242,  243,  253,  256,  257,
      258,  244,    0,  246,  259,  259,    0,  247,  248,  249,
      260,  260,  250,  263,  263,  251,  264,  264,  253,  256,
      257,  258,  265,  265,    0,  266,  266,  276,  263,    0,
        0,  267,  267,  259,  268,  268,  278,  265,  266,  260,
      264,  277,  263,  269,  269,  264,  267,  276,  263,  270,

      270,  265,  271,  271,  266,  268,  278,  265,  266,  279,
      267,  264,  277,  268,  272,  272,  267,  273,  273,  274,
      274,  270,  269,    0,  280,    0,  268,    0,  270,  279,
      298,  271,  275,  275,  281,  283,  273,  286,  287,  274,
        0,  288,  270,  272,  280,  290,  273,  293,  274,  294,
      298,  275,  300,    0,  303,  281,  283,  273,  286,  287,
      274,  275,  288,  304,  305,  312,  290,  310,  293,  315,
      294,  316,  275,  300,  303,  320,  321,  321,  322,  322,
      323,  323,  324,  324,  304,  305,  312,  310,  326,  326,
      315,  332,  316,  325,  325,  320,  327,  327,  335,  328,

      328,  340,  322,  329,  329,  321,  326,  322,    0,  323,
      336,  324,  332,  342,  330,  330,  325,  326,  343,  335,
      347,  340,  325,  322,  348,  327,  351,  326,  328,  330,
      352,  336,  329,  359,  342,  354,  354,  325,  343,  355,
      355,  347,  360,  330,  348,  356,  356,  351,  362,  330,
      352,  357,  357,    0,  359,  364,  366,  355,    0,  356,
      368,  368,  360,  370,  354,  369,  369,  372,  355,  362,
      373,  374,  375,  375,  356,    0,  364,  366,  355,  356,
      357,  376,  380,  380,  370,  368,    0,    0,  372,  368,
        0,  373,  374,    0,  369,    0,  375,    0,    0,    0,

        0,  375,  376,    0,    0,    0,  368,    0,    0,    0,
        0,  380,    0,    0,    0,    0,    0,  375,  385,    0,
      385,  386,  386,  386,  387,  387,  387,  388,  388,  388,
      389,  389,  389,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[46] =
    {   0,
       67,   69,   74,   81,   83,   93,  102,  103,  104,  111,
      112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
      122,  123,  124,  125,  126,  127,  129,  134,  138,  143,
      148,  160,  165,  186,  197,  203,  208,  213,  218,  223,
      234,  249,  250,  252,  257
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
#line 2 "cool.flex"
 /*
 *  The scanner definition for COOL.
 */
 /*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
static int comment_layers = 0;
int buf_leng = 0;

#line 943 "cool-lex.cc"
/*
 * Define names for regular expressions here.
 */

#line 948 "cool-lex.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2
#define ESCAPE_STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 60 "cool.flex"



#line 64 "cool.flex"
 /*
  *  Nested comments
  */
#line 1239 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 383 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1034 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 46 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 46 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 47 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 67 "cool.flex"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "cool.flex"
{ 
  comment_layers++;
  BEGIN COMMENT;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 74 "cool.flex"
{
  comment_layers--;
  if (comment_layers == 0) {
    BEGIN 0;
  }
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "cool.flex"
{  }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 83 "cool.flex"
{
  ++curr_lineno;
}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 87 "cool.flex"
{
  cool_yylval.error_msg = "EOF in comment";
  BEGIN 0;
  return ERROR;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 93 "cool.flex"
{
  cool_yylval.error_msg = "Unmatched *)";
  return ERROR; 
}
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 7:
YY_RULE_SETUP
#line 102 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "cool.flex"
{ return LE; }
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 10:
YY_RULE_SETUP
#line 111 "cool.flex"
{ return CLASS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "cool.flex"
{ return ELSE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "cool.flex"
{ return FI; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "cool.flex"
{ return IF; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "cool.flex"
{ return IN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "cool.flex"
{ return INHERITS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "cool.flex"
{ return LET; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "cool.flex"
{ return LOOP; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "cool.flex"
{ return POOL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 120 "cool.flex"
{ return THEN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 121 "cool.flex"
{ return WHILE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "cool.flex"
{ return CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "cool.flex"
{ return ESAC; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 124 "cool.flex"
{ return OF; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 125 "cool.flex"
{ return NEW; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 126 "cool.flex"
{ return ISVOID; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "cool.flex"
{ return NOT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 129 "cool.flex"
{
  cool_yylval.boolean = true;
  return BOOL_CONST;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 134 "cool.flex"
{
  cool_yylval.boolean = false;
  return BOOL_CONST;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "cool.flex"
{
  cool_yylval.symbol = inttable.add_string(yytext);
  return INT_CONST;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 143 "cool.flex"
{
  cool_yylval.symbol = idtable.add_string(yytext);
  return TYPEID;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 148 "cool.flex"
{
  cool_yylval.symbol = idtable.add_string(yytext);
  return OBJECTID;
}
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 32:
YY_RULE_SETUP
#line 160 "cool.flex"
{
  BEGIN(STRING);
  string_buf_ptr = string_buf;
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 165 "cool.flex"
{

  // copy the yytext to the end of the string_buf
  strcpy(string_buf_ptr, yytext);

  // not include the last character ", and add the \0 on the end.
  *(string_buf_ptr + yyleng) = '\0';
  
  buf_leng = buf_leng + yyleng;
  if (buf_leng > MAX_STR_CONST) {
    cool_yylval.error_msg = "String constant too long";
    BEGIN 0;
    return ERROR;
  }
  
  cool_yylval.symbol = stringtable.add_string(string_buf);
  buf_leng = 0;
  BEGIN 0;
  return STR_CONST;
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 186 "cool.flex"
{
  
  strcpy(string_buf_ptr, yytext);

  // not include the last character escape
  string_buf_ptr = string_buf + buf_leng;
  buf_leng = buf_leng + yyleng - 1;

  BEGIN(ESCAPE_STRING);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 197 "cool.flex"
{
  
  *string_buf_ptr++ = '\n';
  BEGIN(STRING);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 203 "cool.flex"
{
  *string_buf_ptr++ = '\b';
  BEGIN(STRING);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 208 "cool.flex"
{
  *string_buf_ptr++ = '\t';
  BEGIN(STRING);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 213 "cool.flex"
{
  *string_buf_ptr++ = '\f';
  BEGIN(STRING);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 218 "cool.flex"
{
  *string_buf_ptr++ = yytext[0];
  BEGIN(STRING);
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 223 "cool.flex"
{
  *string_buf_ptr++ = '\n';
  curr_lineno++;
  BEGIN(STRING);
}
	YY_BREAK
case YY_STATE_EOF(ESCAPE_STRING):
#line 229 "cool.flex"
{
  cool_yylval.error_msg = "EOF in string constant";
  BEGIN STRING;
  return ERROR;
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "cool.flex"
{
  strcpy(string_buf_ptr, yytext);
  buf_leng = buf_leng + yyleng;
  cool_yylval.error_msg = "Unterminated string constant";
  BEGIN 0;
  curr_lineno++;
  return ERROR;
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 243 "cool.flex"
{
  cool_yylval.error_msg = "EOF in string constant";
  BEGIN 0;
  return ERROR;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 249 "cool.flex"
{ }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 250 "cool.flex"
{ curr_lineno++; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 252 "cool.flex"
{
  cool_yylval.error_msg = yytext;
  return (ERROR);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 257 "cool.flex"
{
  return yytext[0];
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 260 "cool.flex"
ECHO;
	YY_BREAK
#line 1690 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 383 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 383 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 382);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 260 "cool.flex"

