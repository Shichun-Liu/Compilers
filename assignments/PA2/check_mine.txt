#name "test.cl"
#5 CLASS
#5 TYPEID CellularAutomaton
#5 INHERITS
#5 TYPEID IO
#5 '{'
#6 OBJECTID population_map
#6 ':'
#6 TYPEID String
#6 ';'
#8 OBJECTID init
#8 '('
#8 OBJECTID map
#8 ':'
#8 TYPEID String
#8 ')'
#8 ':'
#8 TYPEID SELF_TYPE
#8 '{'
#9 '{'
#10 OBJECTID population_map
#10 ASSIGN
#10 OBJECTID map
#10 ';'
#11 OBJECTID self
#11 ';'
#12 '}'
#13 '}'
#13 ';'
#15 OBJECTID print
#15 '('
#15 ')'
#15 ':'
#15 TYPEID SELF_TYPE
#15 '{'
#16 '{'
#17 OBJECTID out_string
#17 '('
#17 OBJECTID population_map
#17 '.'
#17 OBJECTID concat
#17 '('
#17 OBJECTID n
#17 STR_CONST "\"));\n            self;\n        }\n    };\n   \n    num_cells() : Int {\n        population_map.length()\n    };\n   \n    cell(position : Int) : String {\n        population_map.substr(position, 1)\n    };\n   \n    cell_left_neighbor(position : Int) : String {\n        if position = 0 then\n            cell(num_cells() - 1)\n        else\n            cell(position - 1)\n        fi\n    };\n   \n    cell_right_neighbor(position : Int) : String {\n        if position = num_cells() - 1 then\n            cell(0)\n        else\n            cell(position + 1)\n        fi\n    };\n   \n    (* a cell will live if exactly 1 of itself and it's immediate\n       neighbors are alive *)\n    cell_at_next_evolution(position : Int) : String {\n        if (if cell(position) = \""
#17 TYPEID X
#17 STR_CONST " then 1 else 0 fi\n            + if cell_left_neighbor(position) = \""
#17 TYPEID X
#17 STR_CONST " then 1 else 0 fi\n            + if cell_right_neighbor(position) = \""
#17 TYPEID X
#17 STR_CONST " then 1 else 0 fi\n            = 1)\n        then\n            \""
#17 TYPEID X
#17 STR_CONST "\n        else\n            '.'\n        fi\n    };\n   \n    evolve() : SELF_TYPE {\n        (let position : Int in\n        (let num : Int <- num_cells[] in\n        (let temp : String in\n            {\n                while position < num loop\n                    {\n                        temp <- temp.concat(cell_at_next_evolution(position));\n                        position <- position + 1;\n                    }\n                pool;\n                population_map <- temp;\n                self;\n            }\n        ) ) )\n    };\n};\n\nclass Main {\n    cells : CellularAutomaton;\n   \n    main() : SELF_TYPE {\n        {\n            cells <- (new CellularAutomaton).init(\""
#17 TYPEID X
#18 ERROR "Unterminated string constant"
